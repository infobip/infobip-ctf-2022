// Code generated by fileb0x at "2021-11-28 16:39:39.967152465 +0100 CET m=+0.003132898" from config file "b0x.yaml" DO NOT EDIT.
// modification hash(44e1721483316f1b765c1a2d6e38b339.7b4ebb0f19e36ebf00efd2d3b133b856)

package static


import (
  "bytes"
  "compress/gzip"
  "context"
  "io"
  "net/http"
  "os"
  "path"


  "golang.org/x/net/webdav"


)

var ( 
  // CTX is a context for webdav vfs
  CTX = context.Background()

  
  // FS is a virtual memory file system
  FS = webdav.NewMemFS()
  

  // Handler is used to server files through a http handler
  Handler *webdav.Handler

  // HTTP is the http file system
  HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}



// FileCACrt is "CA.crt"
var FileCACrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x93\xaa\x38\x14\xc5\xf7\x7c\x8a\xd9\x5b\x53\x0d\x76\xdb\xcf\x5e\xbc\x45\x12\x42\x88\x7a\xd1\x84\x04\x84\x1d\x8a\x04\x11\x81\xe7\x3f\x90\x4f\x3f\xf5\xec\x99\xd5\x54\xbd\xbb\xfc\xdd\x53\x67\x73\x7e\x7f\xff\x3e\x4c\x19\x0f\xfe\x22\x54\x2a\xee\x71\x82\x14\x7d\x51\x0b\x38\x27\xbe\x4b\x08\xca\x96\x06\xf5\x1c\x23\xc3\xb5\xe8\x88\x98\x68\xc6\x8b\xf1\x7a\x74\x1e\x22\x5f\x9f\x76\x93\x21\x7e\x00\xde\xd0\x9e\x98\x84\x2f\xdb\x94\x8f\x95\x4d\x51\xcf\x7b\x4b\x2a\xba\x02\x74\x62\xc8\xd1\x14\x97\x40\x44\xa4\x07\x3a\x22\x89\x4d\x10\x61\x64\x80\xd4\xc1\x63\x17\xeb\x9b\x7e\x97\x65\xce\xf4\xc0\x15\x2a\xbe\x7f\x2d\x30\x5a\xdf\xad\x9c\x45\xcf\xdd\x39\xb2\xb9\x97\x77\x29\xcb\xbb\xdc\x07\xa3\x7d\x39\xe3\x74\xb0\x53\x17\x1d\xbc\xde\x7e\x82\xa2\x03\x54\x66\x08\x14\x7f\xc2\xe8\x65\x2f\x56\x7d\x33\xeb\x3f\x08\x54\x0f\x64\x44\x8b\xef\xf6\x44\xa1\x93\x17\x81\x84\x9e\x8a\xc4\x8d\x84\xe0\x2e\xea\xd4\x6e\xea\xd4\xab\x28\xb0\x93\xad\xac\x21\xa4\xbd\xdf\x27\xae\x15\x09\xb1\x74\x71\xb9\xd8\x35\xb2\xde\x9f\x67\x75\x4e\xf0\x36\x8b\x65\x93\x6d\xe5\xc8\x3d\x6c\x1f\x42\x0c\x39\x13\x7d\x5e\x21\x81\xcd\xfe\x57\x79\xaa\xd6\x1b\xc1\x31\x36\xfa\x62\x84\x40\x16\x37\xc1\x11\x21\xf1\xcc\x63\x13\xc6\x74\x8e\x6d\xb8\x5c\x17\xab\xa5\x5b\x27\xcf\x05\x1d\xf9\x24\x79\x9b\xb4\xf3\x6b\x51\x4b\xf7\x53\x4f\xc3\xe4\x38\x78\x7d\x5d\xb1\x7b\xa1\xe6\xee\xc8\x51\xde\x59\x72\xf1\x2e\xc8\x6c\x3c\x24\x93\xe2\xba\x48\x6c\x48\xc9\x9b\xed\x91\xd5\x63\x5a\x75\x3f\xb6\x87\x7a\x7f\x45\x8b\x21\x69\x75\xf6\xa5\x9a\xaa\xdc\x7b\xa4\x99\x6d\xd2\xa6\xc9\xb1\xe9\x2e\x81\xf0\x37\xa5\x55\x90\xac\x1b\x21\xab\xf4\x88\x25\x60\xfb\xf7\x1a\xb9\x6b\x44\x8c\xb1\x54\xd1\xcc\x1b\xce\xa0\xcf\x7d\xdf\xe6\xe9\xe7\xd8\xaf\xec\x43\x1e\xbc\x43\x72\xfb\x77\x09\x3f\x04\x6a\x31\x17\xc5\xe6\xcf\xe1\xcd\x2b\x2c\x01\xa3\x62\x4e\xb1\x42\x2e\x12\xfe\x1b\xa0\x96\x11\xf2\x8b\x59\x21\x7c\x7c\x61\x04\x04\x4d\x0d\x02\xa6\x09\x50\xf5\xb9\x5e\xed\x4f\xcf\x73\x19\x9f\x9b\xed\x5d\x35\x0f\xe7\x94\xb6\x47\xe9\x7d\x91\x56\xe1\x00\x42\x76\x24\xf6\x41\xb5\x8d\xe7\x39\xcd\x7d\x6a\x55\x26\x6c\xd3\xd8\x91\x69\x0b\xae\xe3\xab\xcd\xd6\xf0\x01\x6d\x58\x8b\xc2\xc7\x67\x85\xc8\xd7\x76\xec\x52\x9f\x2a\x75\x5b\x86\x50\x66\xc9\x7a\x19\xdb\x8c\x0c\xee\xd5\x71\xa0\x88\xd3\xfa\xc3\xfa\x71\x11\xbb\xa4\xa0\x5c\xef\x6a\x98\x57\xc9\x65\xc2\x9c\xdb\x87\xf9\xf9\xd3\x7a\x99\x4e\x03\xf7\xff\xf6\xff\x13\x00\x00\xff\xff\x07\xb0\x30\x25\x1a\x03\x00\x00")

// FileClientCrt is "client.crt"
var FileClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xbb\x76\xa3\x3a\x18\x46\x7b\x9e\xe2\xf4\x59\x67\x59\x96\x4d\x82\x8b\x29\x24\x21\x90\x00\x61\x0b\x64\x6e\x5d\x6c\x63\xc0\x40\x42\x0c\x1e\x2e\x4f\x3f\x6b\x9c\x6a\x66\xfe\x72\xef\xe2\x2f\xbe\xfd\xff\xef\xc3\xd4\xe6\xfe\x7f\x84\x06\x8a\x5b\x9c\x20\x45\x9f\x54\x13\x9c\xe3\x5e\x11\x82\x54\x4a\x50\x71\xf8\x14\xe8\xd3\x26\xe4\xcb\x0e\xc5\x76\x87\x91\x20\x82\x1e\x27\xb2\x20\x07\x17\x7e\x84\x51\xaa\x50\x6d\x45\x22\x10\x23\x95\xa9\x19\x49\xc9\x35\x13\x75\xea\x04\xd7\x8d\x17\xf9\x20\x4d\x82\x46\x84\x74\x64\xe3\x53\xba\x26\x2e\x9d\xd3\x47\xd0\x9c\x5b\xbd\xb9\x10\x9c\xbc\xc7\xc1\xc7\x7b\x12\x2c\xdc\xc2\x20\x0f\xb1\xb8\xd8\x72\xd4\x58\x79\xf6\xc5\x8d\x4e\x42\xf1\xad\x50\xc7\x59\x2c\x62\x13\x3f\x19\xff\x93\xdd\xb0\x25\x64\x3f\x92\xef\xcf\x36\x1d\x1d\x1c\x29\xaa\x34\x81\xa9\x8d\xd6\x47\x4a\xd0\xe8\x1e\xe1\x6e\xc8\xc2\xb5\xba\xd8\x16\xc8\x14\x2d\x05\x36\xbe\x5d\x31\xa6\x61\xac\x83\x2c\x71\x1e\x59\x22\x8b\x08\x36\x75\x06\x1b\x70\x9e\xb1\xd4\x2e\xac\x2e\x14\x0b\x6a\xc1\xd2\x91\xa2\x94\xb9\x9f\x19\x5f\x6e\x80\x20\x99\x5a\xee\x96\x52\x44\xb8\x99\x16\x88\xd2\xd2\xe8\xd6\x8d\x77\x50\x32\xac\x1c\xb4\x6a\x4d\x40\xa4\xd9\x75\x86\x36\x4c\x70\xa8\x02\xc8\x09\xeb\x3a\xef\x9e\x64\x97\x70\xd9\x75\x83\x4e\x8c\xfe\xf4\xb6\x24\x2b\x78\xba\xbe\xe5\xa6\xd9\x57\x6c\x53\x4b\xc8\x09\xdc\xdf\xfb\xec\x3a\xfc\x4c\x45\xcc\x42\xeb\xbc\xce\x35\xe0\xb4\xf4\xea\x0f\x4b\x9b\xcc\x3a\x78\x10\xb2\x03\x04\x4e\x5d\x05\xe2\xd7\x3d\x70\x0d\x18\xcd\xd2\x3b\x7b\x5f\x27\xfa\xf7\x3a\x08\xd6\x48\xd8\x29\xd1\x84\x24\x75\x54\xae\x76\x25\xaf\xdc\xb2\x7e\x71\x44\x29\x9a\x91\x4d\xf7\x7d\xd3\xb7\x5b\xe8\xf5\x53\x95\x7f\xd0\x8a\x2f\xc9\x61\x33\x1f\x6e\x8f\x99\xeb\x4d\xe6\xb8\x56\xc4\x2e\xc6\xee\xe4\xb4\x50\x1b\xa6\x2d\x11\xd2\xac\xe0\xf5\xab\x20\x4d\xfc\x96\x3f\x46\xe5\xf4\x2f\x7e\xe8\x3b\x7c\x76\xa2\x63\xbb\x4a\x8e\xe5\x60\x03\xdb\x7a\x95\xeb\xd6\x7e\x61\xe7\x04\xc5\xb9\xc7\x54\xbb\x89\x5c\xac\xef\x35\xaa\x1f\xb2\x7d\x6c\xfc\xd0\x9e\x5d\x51\xdf\xfc\xb7\xb5\x5f\x01\x00\x00\xff\xff\x40\x56\xc7\x47\x88\x02\x00\x00")

// FileClientKey is "client.key"
var FileClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xbd\x76\xb2\x30\x00\x40\x77\x9e\xc2\xdd\xf3\x1d\x15\xf8\x44\x87\x0e\x89\x89\x1a\x09\x09\xc1\x0a\x86\xad\x16\x88\x2d\x04\x3c\xfc\xe3\xd3\xf7\xd4\xb9\x77\xbd\xd3\xbd\xff\x7e\x81\xf8\x40\xd8\x0c\xef\x66\x7e\x40\x42\xf0\x8e\x67\x2e\x96\x2f\x61\x78\xe4\x90\x03\x85\x21\x44\xc8\x1e\xbc\x6e\x5e\x44\xc3\xaa\x1f\x65\x16\xac\xf5\x85\x8f\x30\x59\xd0\x7b\x75\x35\x1b\xa5\xba\x70\x5f\xe7\xce\xa7\xaa\xff\x2f\x37\xac\x6a\xbe\xad\xb5\x0d\x4b\x1e\x19\x1c\x2e\x93\x54\x17\x0f\xe4\xb8\x0a\x0e\x72\xef\xda\x18\x83\x9d\x7b\x8f\x01\xfb\x02\x40\x9c\x8f\x53\x19\x5d\x9a\x2d\x83\x2e\xc9\xd1\x5c\xfa\xe2\x04\xb8\x2e\x27\xeb\xf8\x61\x9e\x8e\x52\x11\x23\xd5\x79\xd7\x26\xc5\x8a\xfa\xa6\xb6\x72\x3a\x8d\x7d\xcf\xb2\x45\xdc\x2e\x5a\xdb\xe3\x13\xc9\xd2\x00\x49\x45\xe5\xba\x1b\x8b\xb9\xb9\x55\xa3\x4c\x48\xf8\x0c\x1d\xa1\x65\xb0\x31\x2d\x1e\x1b\x19\x2d\xcf\x36\xa1\x96\xa0\xb7\x83\xa6\xc1\xad\x72\x44\xfd\x8c\xaf\x27\xd0\x0e\xdd\xa3\x11\x6f\xc6\xab\x14\x33\xf4\xe7\x80\x9f\x00\x00\x00\xff\xff\x4e\xd2\x75\xad\x20\x01\x00\x00")



func init() {
  err := CTX.Err()
  if err != nil {
		panic(err)
	}









  
  var f webdav.File
  

  
  
  var rb *bytes.Reader
  var r *gzip.Reader
  
  

  
  
  
  rb = bytes.NewReader(FileCACrt)
  r, err = gzip.NewReader(rb)
  if err != nil {
    panic(err)
  }

  err = r.Close()
  if err != nil {
    panic(err)
  }
  
  

  f, err = FS.OpenFile(CTX, "CA.crt", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  
  _, err = io.Copy(f, r)
  if err != nil {
    panic(err)
  }
  
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  
  
  
  rb = bytes.NewReader(FileClientCrt)
  r, err = gzip.NewReader(rb)
  if err != nil {
    panic(err)
  }

  err = r.Close()
  if err != nil {
    panic(err)
  }
  
  

  f, err = FS.OpenFile(CTX, "client.crt", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  
  _, err = io.Copy(f, r)
  if err != nil {
    panic(err)
  }
  
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  
  
  
  rb = bytes.NewReader(FileClientKey)
  r, err = gzip.NewReader(rb)
  if err != nil {
    panic(err)
  }

  err = r.Close()
  if err != nil {
    panic(err)
  }
  
  

  f, err = FS.OpenFile(CTX, "client.key", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
  if err != nil {
    panic(err)
  }

  
  
  _, err = io.Copy(f, r)
  if err != nil {
    panic(err)
  }
  
  

  err = f.Close()
  if err != nil {
    panic(err)
  }
  


  Handler = &webdav.Handler{
    FileSystem: FS,
    LockSystem: webdav.NewMemLS(),
  }


}



// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
  path = hfs.Prefix + path


  f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
  if err != nil {
    return nil, err
  }

  return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
  f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
  if err != nil {
    return nil, err
  }

  buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

  // If the buffer overflows, we will get bytes.ErrTooLarge.
  // Return that as an error. Any other panic remains.
  defer func() {
    e := recover()
    if e == nil {
      return
    }
    if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
      err = panicErr
    } else {
      panic(e)
    }
  }()
  _, err = buf.ReadFrom(f)
  return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
  f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
  if err != nil {
    return err
  }
  n, err := f.Write(data)
  if err == nil && n < len(data) {
    err = io.ErrShortWrite
  }
  if err1 := f.Close(); err == nil {
    err = err1
  }
  return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
    return nil, err
  }
  
  err = f.Close()
  if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}


